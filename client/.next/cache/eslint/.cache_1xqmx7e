[{"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\auth\\join.tsx":"1","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\auth\\login.tsx":"2","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\auth\\resetPassword.tsx":"3","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\forms\\[form]\\index.tsx":"4","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\forms\\[form]\\viewform.tsx":"5","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\index.tsx":"6","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\mypage\\account\\changePassword.tsx":"7","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\mypage\\account\\deleteAccount.tsx":"8","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\mypage\\account\\profile.tsx":"9","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\mypage\\myForm.tsx":"10","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\_app.tsx":"11","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\Alert.tsx":"12","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\App.tsx":"13","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\Card.tsx":"14","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\Input.tsx":"15","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\layout\\AccountLeftPannel.tsx":"16","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\layout\\AuthContainer.tsx":"17","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\layout\\Header.tsx":"18","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\layout\\MypageHeader.tsx":"19","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\Logo.tsx":"20","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\Modal.tsx":"21","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\Toggle.tsx":"22"},{"size":16599,"mtime":1640228521787,"results":"23","hashOfConfig":"24"},{"size":7137,"mtime":1640228112111,"results":"25","hashOfConfig":"24"},{"size":12575,"mtime":1640229225492,"results":"26","hashOfConfig":"24"},{"size":92332,"mtime":1640228786917,"results":"27","hashOfConfig":"24"},{"size":26335,"mtime":1640228856279,"results":"28","hashOfConfig":"24"},{"size":4277,"mtime":1640218459708,"results":"29","hashOfConfig":"24"},{"size":8579,"mtime":1640227424919,"results":"30","hashOfConfig":"24"},{"size":4890,"mtime":1640227437341,"results":"31","hashOfConfig":"24"},{"size":13993,"mtime":1640227445445,"results":"32","hashOfConfig":"24"},{"size":8090,"mtime":1640227410561,"results":"33","hashOfConfig":"24"},{"size":568,"mtime":1640218459699,"results":"34","hashOfConfig":"24"},{"size":1812,"mtime":1640218459683,"results":"35","hashOfConfig":"24"},{"size":2339,"mtime":1640218459684,"results":"36","hashOfConfig":"24"},{"size":5475,"mtime":1640218459685,"results":"37","hashOfConfig":"24"},{"size":3746,"mtime":1640228288375,"results":"38","hashOfConfig":"24"},{"size":1556,"mtime":1640228251515,"results":"39","hashOfConfig":"24"},{"size":242,"mtime":1640218459690,"results":"40","hashOfConfig":"24"},{"size":5795,"mtime":1640228236638,"results":"41","hashOfConfig":"24"},{"size":9689,"mtime":1640228198934,"results":"42","hashOfConfig":"24"},{"size":325,"mtime":1639647563344,"results":"43","hashOfConfig":"24"},{"size":2303,"mtime":1640218459687,"results":"44","hashOfConfig":"24"},{"size":931,"mtime":1640218459688,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"e3sqqk",{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\auth\\join.tsx",["95","96"],"import React, { ChangeEvent, KeyboardEvent, useEffect, useRef, useState } from \"react\";\r\nimport Image from \"next/image\";\r\nimport { useRouter } from \"next/router\";\r\nimport Link from \"next/link\";\r\nimport Header from \"../../components/layout/Header\";\r\nimport AuthContainer from \"../../components/layout/AuthContainer\";\r\nimport { isValidEmail } from \"../../utils/regex\";\r\nimport Logo from \"../../components/Logo\";\r\nimport axios from \"axios\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setAccessToken, setAlert } from \"../../reducers/store/user\";\r\nimport App from \"../../components/App\";\r\n\r\ninterface IUserInfo {\r\n    email: string;\r\n    name: string;\r\n    nickname: string;\r\n    password: string;\r\n    rePassword: string;\r\n    auth: string;\r\n}\r\n\r\ninterface IError {\r\n    passwordError: string;\r\n    authError: string;\r\n}\r\n\r\ninterface IDisable {\r\n    authDisable: boolean;\r\n    singUpDisable: boolean;\r\n}\r\n\r\nconst Join = () => {\r\n    const dispatch = useDispatch();\r\n    const router = useRouter();\r\n    // ref\r\n    const nameRef = useRef<HTMLInputElement>(null);\r\n    const nicknameRef = useRef<HTMLInputElement>(null);\r\n    const passwordRef = useRef<HTMLInputElement>(null);\r\n    const rePasswordRef = useRef<HTMLInputElement>(null);\r\n    const authRef = useRef<HTMLInputElement>(null);\r\n\r\n    // 사용자의 이메일, 페스워드 state\r\n    const [userInfo, setUserInfo] = useState<IUserInfo>({\r\n        email: \"\",\r\n        name: \"\",\r\n        nickname: \"\",\r\n        password: \"\",\r\n        rePassword: \"\",\r\n        auth: \"\",\r\n    });\r\n\r\n    // 인증번호 관련\r\n    const [authNumber, setAuthNumber] = useState<string>(\"\");\r\n    const [showAuthNumber, setShowAuthNumber] = useState<boolean>(false);\r\n\r\n    // input 상태 관리\r\n    const stateHandler = (e: ChangeEvent<HTMLInputElement>): void => {\r\n        if (e.target.id === \"email\") {\r\n            setUserInfo({\r\n                ...userInfo,\r\n                email: e.target.value,\r\n            });\r\n        } else if (e.target.id === \"name\") {\r\n            setUserInfo({\r\n                ...userInfo,\r\n                name: e.target.value,\r\n            });\r\n        } else if (e.target.id === \"nickname\") {\r\n            setUserInfo({\r\n                ...userInfo,\r\n                nickname: e.target.value,\r\n            });\r\n        } else if (e.target.id === \"password\") {\r\n            setUserInfo({\r\n                ...userInfo,\r\n                password: e.target.value,\r\n            });\r\n        } else if (e.target.id === \"re-password\") {\r\n            setUserInfo({\r\n                ...userInfo,\r\n                rePassword: e.target.value,\r\n            });\r\n        } else if (e.target.id === \"auth\") {\r\n            setUserInfo({\r\n                ...userInfo,\r\n                auth: e.target.value,\r\n            });\r\n        }\r\n    };\r\n\r\n    // 에러 메세지\r\n    const [error, setError] = useState<IError>({\r\n        passwordError: \"\", // 비밀번호 불일치\r\n        authError: \"\", // 인증번호 불일치\r\n    });\r\n\r\n    // 버튼 활성화\r\n    const [isDisable, setIsDisable] = useState<IDisable>({\r\n        authDisable: true,\r\n        singUpDisable: true,\r\n    });\r\n\r\n    // 인증번호 요청 버튼 활성화 관련\r\n    useEffect((): void => {\r\n        if (userInfo.name === \"\" || userInfo.nickname === \"\" || userInfo.password === \"\" || userInfo.rePassword === \"\" || !isValidEmail(userInfo.email)) {\r\n            setIsDisable({\r\n                ...isDisable,\r\n                authDisable: true,\r\n            });\r\n        } else {\r\n            setIsDisable({\r\n                ...isDisable,\r\n                authDisable: false,\r\n            });\r\n        }\r\n    }, [userInfo]);\r\n\r\n    // 회원가입 버튼 활성화 관련\r\n    useEffect((): void => {\r\n        if (userInfo.auth === \"\") {\r\n            setIsDisable({\r\n                ...isDisable,\r\n                singUpDisable: true,\r\n            });\r\n        } else {\r\n            setIsDisable({\r\n                ...isDisable,\r\n                singUpDisable: false,\r\n            });\r\n        }\r\n    }, [userInfo.auth]);\r\n\r\n    // 엔터 단축키 관련 >>> 한글 마지막 글자가 다음 input에 써지는 에러가 있습니다.\r\n    const pressEnter = (e: KeyboardEvent<HTMLInputElement>): void => {\r\n        const target = e.target as HTMLInputElement;\r\n        if (target.id === \"email\" && e.code === \"Enter\") {\r\n            // nameRef.current.focus();\r\n        } else if (target.id === \"name\" && e.code === \"Enter\") {\r\n            // nicknameRef.current.focus();\r\n        } else if (target.id === \"nickname\" && e.code === \"Enter\") {\r\n            // passwordRef.current.focus();\r\n        } else if (target.id === \"password\" && e.code === \"Enter\") {\r\n            // rePasswordRef.current.focus();\r\n        } else if (target.id === \"re-password\" && !isDisable.authDisable && e.code === \"Enter\") {\r\n            requestAuth();\r\n        }\r\n        if (target.id === \"auth\" && e.code === \"Enter\" && !isDisable.singUpDisable) {\r\n            requestSignUp();\r\n        }\r\n    };\r\n\r\n    // 타이머\r\n    const [showTimer, setShowTimer] = useState<boolean>(false);\r\n    const [min, setMin] = useState<number>(3);\r\n    const [sec, setSec] = useState<number>(0);\r\n    const time = useRef<number>(179);\r\n    const timerId = useRef(null);\r\n\r\n    useEffect((): void => {\r\n        // 시간이 끝난 경우\r\n        if (time.current < 0) {\r\n            clearInterval(timerId.current);\r\n            setAuthNumber(\"\");\r\n        }\r\n    }, [sec]);\r\n\r\n    // 인증번호 요청\r\n    const requestAuth = (): void => {\r\n        if (userInfo.password !== userInfo.rePassword) {\r\n            setError({\r\n                ...error,\r\n                passwordError: \"비밀번호가 일치하지 않습니다.\",\r\n            });\r\n        } else {\r\n            setShowAuthNumber(false);\r\n            setShowTimer(false);\r\n            setIsDisable({\r\n                ...isDisable,\r\n                authDisable: true,\r\n            });\r\n            setError({\r\n                passwordError: \"\",\r\n                authError: \"\",\r\n            });\r\n            clearInterval(timerId.current);\r\n            time.current = 180;\r\n            setMin(3);\r\n            setSec(0);\r\n            timerId.current = setInterval(() => {\r\n                setMin(parseInt(String(time.current / 60)));\r\n                setSec(time.current % 60);\r\n                time.current -= 1;\r\n            }, 1000);\r\n            axios\r\n                .post(\"http://elb-test-852958890.ap-northeast-2.elb.amazonaws.com/user/signupEmailAuth/\", {\r\n                    email: userInfo.email,\r\n                })\r\n                .then((res) => {\r\n                    setUserInfo({\r\n                        ...userInfo,\r\n                        auth: \"\",\r\n                    });\r\n                    setAuthNumber(String(res.data.data));\r\n                    setIsDisable({\r\n                        ...isDisable,\r\n                        authDisable: false,\r\n                    });\r\n                    setShowAuthNumber(true);\r\n                    setShowTimer(true);\r\n                    authRef.current.focus();\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err.response);\r\n                });\r\n        }\r\n    };\r\n\r\n    // 회원가입 요청\r\n    const requestSignUp = (): void => {\r\n        // 인증번호가 일치하지 않을 경우\r\n        if (userInfo.auth !== authNumber) {\r\n            setError({\r\n                ...error,\r\n                authError: \"인증번호가 일치하지 않습니다.\",\r\n            });\r\n        } else {\r\n            setError({\r\n                ...error,\r\n                authError: \"\",\r\n            });\r\n            axios\r\n                .post(\"http://elb-test-852958890.ap-northeast-2.elb.amazonaws.com/user/signup/\", {\r\n                    email: userInfo.email,\r\n                    name: userInfo.name,\r\n                    nickname: userInfo.nickname,\r\n                    password: userInfo.password,\r\n                })\r\n                .then((res) => {\r\n                    dispatch(setAccessToken(res.data.data.accessToken));\r\n                    clearInterval(timerId.current);\r\n                    router.push({\r\n                        pathname: \"/\",\r\n                        query: {\r\n                            signup: true,\r\n                        },\r\n                    });\r\n                    setTimeout(() => {\r\n                        dispatch(setAlert(true));\r\n                    }, 50);\r\n                })\r\n                .catch((err) => {\r\n                    // if (err.response.data.message === \"unAuthorized\") {\r\n                    //     setLoginError(\"비밀번호를 확인해 주세요.\");\r\n                    // } else if (\r\n                    //     err.response.data.message === \"not exists user email\"\r\n                    // ) {\r\n                    //     setLoginError(\"등록되지 않는 이메일 입니다.\");\r\n                    // }\r\n                    if (err.response.data.message === \"email exists\") {\r\n                        setError({\r\n                            ...error,\r\n                            authError: \"이미 가입된 메일입니다.\",\r\n                        });\r\n                    }\r\n                });\r\n            // router.push(\"/auth/login\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(authNumber);\r\n    }, [authNumber]);\r\n\r\n    return (\r\n        <>\r\n            <App />\r\n            <Header />\r\n            <AuthContainer>\r\n                <div className=\"flex justify-center items-center space-x-2\">\r\n                    <Logo />\r\n                </div>\r\n                <div className=\"mt-8\">\r\n                    <p className=\"mb-4 text-gray-600\">소셜 계정으로 회원가입</p>\r\n                    <Image\r\n                        className=\"cursor-pointer\"\r\n                        src=\"/github.png\"\r\n                        alt=\"formBakery Logo\"\r\n                        width={40}\r\n                        height={40}\r\n                        onClick={() => {\r\n                            alert(\"github 연동\");\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"inline-flex border-t-1 w-96 h-0.5 mt-4\" />\r\n                <p className=\"mt-2 text-gray-600\">이메일로 가입</p>\r\n                <p className=\"inline-flex mt-4 w-96 text-gray-600 text-sm\">기본 정보</p>\r\n                <div className=\"mt-2\">\r\n                    <input\r\n                        id=\"email\"\r\n                        className=\"border-2 w-96 border-slate-200 h-12 rounded-md pl-2 outline-main\"\r\n                        type={\"email\"}\r\n                        value={userInfo.email}\r\n                        onChange={(e) => {\r\n                            stateHandler(e);\r\n                        }}\r\n                        placeholder=\"이메일을 입력해주세요\"\r\n                        onKeyDown={(e) => {\r\n                            pressEnter(e);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"mt-2\">\r\n                    <input\r\n                        id=\"name\"\r\n                        className=\"border-2 w-96 border-slate-200 h-12 rounded-md pl-2 outline-main\"\r\n                        type={\"text\"}\r\n                        value={userInfo.name}\r\n                        onChange={(e) => {\r\n                            stateHandler(e);\r\n                        }}\r\n                        placeholder=\"이름을 입력해주세요\"\r\n                        onKeyDown={(e) => {\r\n                            pressEnter(e);\r\n                        }}\r\n                        ref={nameRef}\r\n                    />\r\n                </div>\r\n                <div className=\"mt-2\">\r\n                    <input\r\n                        id=\"nickname\"\r\n                        className=\"border-2 w-96 border-slate-200 h-12 rounded-md pl-2 outline-main\"\r\n                        type={\"text\"}\r\n                        value={userInfo.nickname}\r\n                        onChange={(e) => {\r\n                            stateHandler(e);\r\n                        }}\r\n                        placeholder=\"닉네임을 입력해주세요\"\r\n                        onKeyDown={(e) => {\r\n                            pressEnter(e);\r\n                        }}\r\n                        ref={nicknameRef}\r\n                    />\r\n                </div>\r\n                <div className=\"mt-2\">\r\n                    <input\r\n                        id=\"password\"\r\n                        className=\"border-2 w-96 border-slate-200 h-12 rounded-md pl-2 outline-main\"\r\n                        type={\"password\"}\r\n                        value={userInfo.password}\r\n                        onChange={(e) => {\r\n                            stateHandler(e);\r\n                        }}\r\n                        onKeyDown={(e) => {\r\n                            pressEnter(e);\r\n                        }}\r\n                        placeholder=\"비밀번호를 입력해주세요\"\r\n                        ref={passwordRef}\r\n                    />\r\n                </div>\r\n                <div className=\"mt-2\">\r\n                    <input\r\n                        id=\"re-password\"\r\n                        className=\"border-2 w-96 border-slate-200 h-12 rounded-md pl-2 outline-main\"\r\n                        type={\"password\"}\r\n                        value={userInfo.rePassword}\r\n                        onChange={(e) => {\r\n                            stateHandler(e);\r\n                        }}\r\n                        onKeyDown={(e) => {\r\n                            pressEnter(e);\r\n                        }}\r\n                        placeholder=\"비밀번호를 한번 더 입력해주세요\"\r\n                        ref={rePasswordRef}\r\n                    />\r\n                </div>\r\n                <div className=\"mt-2\">\r\n                    <div className=\"inline-flex relative w-96 justify-end\">\r\n                        <p className=\"text-red-400 absolute top-2 left-2 text-sm\">{error.passwordError}</p>\r\n                        {showTimer && <p className=\"text-red-400 absolute top-2 right-40 text-sm\">{time.current !== -1 ? `${min}분 ${sec}초` : \"인증시간을 초과하였습니다.\"}</p>}\r\n                        <button className={`w-36 h-10 rounded-md ${isDisable.authDisable ? \"bg-slate-100 text-slate-300\" : \"bg-main text-white\"}`} disabled={isDisable.authDisable} onClick={requestAuth}>\r\n                            인증번호 요청\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                {showAuthNumber && (\r\n                    <>\r\n                        <p className=\"inline-flex mt-4 w-96 text-gray-600 text-sm\">이메일 인증</p>\r\n                        <div className=\"mt-2\">\r\n                            <input\r\n                                id=\"auth\"\r\n                                className=\"border-2 w-96 border-slate-200 h-12 rounded-md pl-2 outline-main\"\r\n                                type={\"text\"}\r\n                                value={userInfo.auth}\r\n                                onChange={(e) => {\r\n                                    stateHandler(e);\r\n                                }}\r\n                                placeholder=\"인증번호 6자리를 입력해주세요\"\r\n                                onKeyDown={(e) => {\r\n                                    pressEnter(e);\r\n                                }}\r\n                                ref={authRef}\r\n                            />\r\n                        </div>\r\n                        {error.authError && <p className=\"inline-flex text-red-400 w-96 pl-2 text-sm\">{error.authError}</p>}\r\n                        <div className=\"mt-6\">\r\n                            <button className={`w-96 h-12 rounded-md ${isDisable.singUpDisable ? \"bg-slate-100 text-slate-300\" : \"bg-main text-white\"}`} disabled={isDisable.singUpDisable} onClick={requestSignUp}>\r\n                                회원가입\r\n                            </button>\r\n                        </div>\r\n                    </>\r\n                )}\r\n                <p className=\"inline-flex w-96 mt-4 text-sm text-gray-400\">\r\n                    이미 계정이 있으신가요?{\" \"}\r\n                    <Link href={\"/auth/login\"} passHref>\r\n                        <span className=\"ml-2 text-main cursor-pointer\">로그인</span>\r\n                    </Link>\r\n                </p>\r\n            </AuthContainer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Join;\r\n","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\auth\\login.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\auth\\resetPassword.tsx",["97","98"],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\forms\\[form]\\index.tsx",["99","100"],"import React, { useState, useEffect, useRef, ChangeEvent } from \"react\";\r\nimport Card from \"../../../components/Card\";\r\nimport Toggle from \"../../../components/Toggle\";\r\nimport Input from \"../../../components/Input\";\r\nimport classNames from \"classnames\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Select, MenuItem, Tooltip, IconButton, Divider, Button } from \"@material-ui/core\";\r\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\nimport ArrowDropDownCircleIcon from \"@material-ui/icons/ArrowDropDownCircle\";\r\nimport ImageOutlinedIcon from \"@material-ui/icons/ImageOutlined\";\r\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\r\nimport StarBorderIcon from \"@material-ui/icons/StarBorder\";\r\nimport StarIcon from \"@material-ui/icons/Star\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport VisibilityOutlinedIcon from \"@material-ui/icons/VisibilityOutlined\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport DragIndicatorIcon from \"@material-ui/icons/DragIndicator\";\r\nimport RadioButtonUncheckedOutlinedIcon from \"@material-ui/icons/RadioButtonUncheckedOutlined\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\r\nimport WarningIcon from \"@material-ui/icons/Warning\";\r\nimport SubjectIcon from \"@material-ui/icons/Subject\";\r\nimport Logo from \"../../../components/Logo\";\r\nimport { useRouter } from \"next/router\";\r\nimport Link from \"next/link\";\r\nimport axios from \"axios\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport Alert from \"../../../components/Alert\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setAlert } from \"../../../reducers/store/user\";\r\nimport App from \"../../../components/App\";\r\n\r\n// @material-ui/core/styles 적용\r\nconst useStyles = makeStyles((theme) => ({\r\n    select: {\r\n        backgroundColor: \"white\",\r\n        width: 208,\r\n        height: 48,\r\n        color: \"#5f6368\",\r\n        outline: \"none\",\r\n        inline: \"none\",\r\n        \"&:focus\": {\r\n            backgroundColor: \"white\",\r\n        },\r\n        \"&:hover\": {\r\n            backgroundColor: \"white\",\r\n        },\r\n        \"&:active\": {\r\n            backgroundColor: \"white\",\r\n        },\r\n        \"&:link\": {\r\n            backgroundColor: \"white\",\r\n        },\r\n        \"&:visited\": {\r\n            backgroundColor: \"white\",\r\n        },\r\n    },\r\n    MenuItem: {\r\n        color: \"#5F6368\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"#EEEEEE\",\r\n        },\r\n        \"&:focus\": {\r\n            backgroundColor: \"rgba(26,115,232,0.078)\",\r\n        },\r\n        \"&:focus:hover\": {\r\n            backgroundColor: \"rgba(26,115,232,0.039)\",\r\n        },\r\n    },\r\n    icon: {\r\n        marginRight: 10,\r\n    },\r\n    MenuItemList: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n    },\r\n    MenuItemListLabel: {\r\n        marginTop: 3,\r\n        marginLeft: 10,\r\n    },\r\n}));\r\n\r\ninterface IGridData {\r\n    row: number;\r\n    col: number;\r\n    rawName: string[];\r\n    colName: string[];\r\n}\r\n\r\ninterface IFormOptions {\r\n    text: string;\r\n    uuid: string;\r\n}\r\n\r\ninterface IQuestions {\r\n    question: string; // 질문제목\r\n    type: string; // 타입 (short, long, check, radio, drop, calender, time)\r\n    order: number; // 순서\r\n    section: number; // 페이지\r\n    content?: string; // 질문설명\r\n    isNeccessary?: boolean; // 필수\r\n    gridData?: IGridData; // 그리드\r\n    formOptions?: IFormOptions[]; //체크박스,라디오,드롭다운\r\n    uuid: string; // 문제ID\r\n}\r\n\r\n// form 생성영역\r\nconst CreateForm = () => {\r\n    const dispatch = useDispatch();\r\n    const router = useRouter();\r\n    const classes = useStyles();\r\n    //ref\r\n    const rightDiv = useRef<HTMLDivElement>(null);\r\n    const headerTitle = useRef<HTMLInputElement>(null);\r\n    const footer = useRef<HTMLDivElement>();\r\n\r\n    // 폼 아이디로 폼 조회\r\n    useEffect((): void => {\r\n        // 폼 아이디\r\n        if (router.query.form) {\r\n            axios\r\n                .get(`http://elb-test-852958890.ap-northeast-2.elb.amazonaws.com/form/get/${router.query.form}`)\r\n                .then((res) => {\r\n                    setTitle(res.data.data.title);\r\n                    setSubTitle(res.data.data.subTitle);\r\n                    setQuestions(\r\n                        res.data.data.formContents.map((question) => {\r\n                            if (question.type === \"long\" || question.type === \"short\" || question.type === \"calendar\" || question.type === \"time\") {\r\n                                delete question.id;\r\n                                return {\r\n                                    ...question,\r\n                                    isNeccessary: question.isNeccessary === \"n\" ? false : true,\r\n                                    formOptions: [{ text: \"옵션 1\", uuid: uuid() }],\r\n                                    uuid: uuid(),\r\n                                };\r\n                            } else {\r\n                                delete question.id;\r\n                                return {\r\n                                    ...question,\r\n                                    isNeccessary: question.isNeccessary === \"n\" ? false : true,\r\n                                    formOptions: question.formOptions.map((val) => {\r\n                                        return {\r\n                                            text: val.text,\r\n                                            uuid: uuid(),\r\n                                        };\r\n                                    }),\r\n                                    uuid: uuid(),\r\n                                };\r\n                            }\r\n                        })\r\n                    );\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n    }, [router.query.form]);\r\n\r\n    // 제목 설정\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\r\n        setTitle(e.target.value);\r\n    };\r\n\r\n    // 부제목 설정\r\n    const [subTitle, setSubTitle] = useState<string>(\"\");\r\n    const onChangeSubTitle = (e: ChangeEvent<HTMLTextAreaElement>): void => {\r\n        setSubTitle(e.target.value);\r\n    };\r\n\r\n    // 질문 설정\r\n    const [questions, setQuestions] = useState<IQuestions[]>([\r\n        {\r\n            question: \"제목없는 질문\",\r\n            type: \"radio\",\r\n            order: 1,\r\n            section: 1,\r\n            isNeccessary: false,\r\n            formOptions: [{ text: \"옵션 1\", uuid: uuid() }],\r\n            uuid: uuid(),\r\n        },\r\n    ]);\r\n\r\n    // 선택된 질문 index\r\n    const [cardIndex, setCardIndex] = useState<number>(1);\r\n\r\n    // 헤더의 제목 focus시 밑줄 효과\r\n    const [focus, setFocus] = useState<boolean>(false);\r\n\r\n    // 옵션의 id\r\n    const [optionUuid, setOptionUuid] = useState<string>(\"\");\r\n\r\n    // 별표 유무\r\n    const [fillStar, setFillStar] = useState<boolean>(false);\r\n\r\n    // 경고메세지표시 index\r\n    const [warningIndex, setWarningIndex] = useState<string>(\"\");\r\n\r\n    // 우측 질문추가 버튼 위치 조정\r\n    const itemClickHandler = (i: number): void => {\r\n        const newTopHeight: HTMLElement | any = cardIndex === 0 ? document.getElementById(\"cardContainer\").children[0] : document.getElementById(\"cardContainer\").children[1].children[cardIndex - 1];\r\n        if (newTopHeight !== null) {\r\n            rightDiv.current.style.top = newTopHeight.offsetTop + \"px\";\r\n        }\r\n    };\r\n\r\n    // 헤더 제목에 따른 제목 너비변화\r\n    useEffect((): void => {\r\n        headerTitle.current.style.width = (headerTitle.current.value.replace(/\\s/gi, \"\").length + 1) * 18 + (headerTitle.current.value.match(/ /g) || []).length * 5 + \"px\";\r\n    }, [title]);\r\n\r\n    // 질문 갯수에 따라서 질문 focus 바뀜\r\n    const [questionsLength, setQuestionsLength] = useState<number>(1);\r\n\r\n    // 질문 갯수가 늘어날 때 최근에 늘어난 곳으로 focus이동, 만약 삭제될 경우 그 전 질문으로 focus 이동\r\n    useEffect((): void => {\r\n        if (questions.length === questionsLength + 1) {\r\n            setCardIndex(cardIndex + 1);\r\n            if (cardIndex === questions.length - 1) {\r\n                footer.current.scrollIntoView({ behavior: \"smooth\" });\r\n            }\r\n        } else if (questions.length === questionsLength - 1) {\r\n            if (cardIndex === 1 && questions.length != 0) {\r\n                setCardIndex(cardIndex);\r\n            } else {\r\n                setCardIndex(cardIndex - 1);\r\n            }\r\n        }\r\n        setQuestionsLength(questions.length);\r\n    }, [questions]);\r\n\r\n    // // 사이트 나갈 때 경고창\r\n    // useEffect(() => {\r\n    //     itemClickHandler(1);\r\n    //     window.onbeforeunload = function (e) {\r\n    //         var dialogText = \"Dialog text here\";\r\n    //         e.returnValue = dialogText;\r\n    //         return dialogText;\r\n    //     };\r\n    // }, []);\r\n\r\n    // 선택 이전 카드내역\r\n    const [prevCardIndex, setprevCardIndex] = useState<number>(1);\r\n\r\n    // 선택 카드가 바뀔때마다 해당 질문 블록지정\r\n    useEffect((): void => {\r\n        itemClickHandler(cardIndex);\r\n        if (cardIndex != prevCardIndex && cardIndex != 0) {\r\n            if (cardIndex === 0) {\r\n                const textarea = document.getElementById(\"cardContainer\").children[0].getElementsByClassName(\"customTextarea\")[0] as HTMLTextAreaElement;\r\n                textarea.select();\r\n            } else {\r\n                const textarea = document.getElementById(\"cardContainer\").children[1].children[cardIndex - 1].getElementsByClassName(\"customTextarea\")[0] as HTMLTextAreaElement;\r\n                textarea.select();\r\n            }\r\n        }\r\n        setprevCardIndex(cardIndex);\r\n    }, [cardIndex]);\r\n\r\n    // 옵션 섞는 기능\r\n    const shuffleArray = (array: IFormOptions[]): IFormOptions[] => {\r\n        for (let i = 0; i < array.length; i++) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            const x = array[i];\r\n            array[i] = array[j];\r\n            array[j] = x;\r\n        }\r\n        return array;\r\n    };\r\n\r\n    useEffect((): void => {\r\n        document.body.onkeydown = (e) => {\r\n            if (e.ctrlKey && e.key === \"Enter\") {\r\n                if (cardIndex === 0) {\r\n                    return;\r\n                }\r\n                const cp = [...questions];\r\n                cp[cardIndex - 1].formOptions = shuffleArray(cp[cardIndex - 1].formOptions);\r\n                setQuestions(cp);\r\n            }\r\n        };\r\n    }, [cardIndex, questions]);\r\n\r\n    // drag and drop\r\n    const handleOnDragEnd = (result: any): void => {\r\n        if (!result.destination) return;\r\n        const items = Array.from(questions);\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        setCardIndex(result.destination.index + 1);\r\n        setQuestions(items);\r\n    };\r\n\r\n    // 폼 수정 저장\r\n    const requestFormUpdate = (e: any): void => {\r\n        const temp_questions = questions.map((obj, i) => {\r\n            if (obj.type === \"long\" || obj.type === \"short\" || obj.type === \"calendar\" || obj.type === \"time\") {\r\n                delete obj.uuid;\r\n                delete obj.formOptions;\r\n                return {\r\n                    ...obj,\r\n                    isNeccessary: obj.isNeccessary ? \"y\" : \"n\",\r\n                    section: 1,\r\n                    order: i + 1,\r\n                };\r\n            } else {\r\n                delete obj.uuid;\r\n                return {\r\n                    ...obj,\r\n                    formOptions: obj.formOptions.map((v) => {\r\n                        return v.text;\r\n                    }),\r\n                    isNeccessary: obj.isNeccessary ? \"y\" : \"n\",\r\n                    section: 1,\r\n                    order: i + 1,\r\n                };\r\n            }\r\n        });\r\n        const body = {\r\n            title: title,\r\n            subTitle: subTitle,\r\n            questions: temp_questions,\r\n        };\r\n        console.log(body);\r\n        axios\r\n            .put(`http://elb-test-852958890.ap-northeast-2.elb.amazonaws.com/form/update/${router.query.form}`, body)\r\n            .then((res) => {\r\n                console.log(res);\r\n                {\r\n                    e === 1 ? router.push(`/forms/${router.query.form}/viewform`) : dispatch(setAlert(true));\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    // 미리보기\r\n    const preview = (): void => {\r\n        requestFormUpdate(1);\r\n    };\r\n\r\n    // 보내기 모달 보임 유무\r\n    const [isVisibleModal, setIsVisibleModal] = useState<boolean>(false);\r\n    const toggleLogoutModal = (): void => {\r\n        setIsVisibleModal((prev) => !prev);\r\n    };\r\n\r\n    // 클립보드 복사 성공 모달\r\n    const [isCopyed, setIsCopyed] = useState<boolean>(false);\r\n\r\n    // 클립보드에 복사\r\n    const handleCopyClipBoard = async (text: string) => {\r\n        try {\r\n            await navigator.clipboard.writeText(text);\r\n            setIsCopyed(true);\r\n            setTimeout(() => {\r\n                setIsCopyed(false);\r\n            }, 2000);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"min-h-forms\" style={{ paddingBottom: 50, backgroundColor: \"#ffffef\" }}>\r\n            <App />\r\n            <div className=\"bg-white border-b-2 shadow-sm h-16 flex justify-center items-center\">\r\n                <div className=\"inline-flex w-222 justify-between\">\r\n                    <div className=\"flex fdr aic\">\r\n                        <Link href={\"/\"} passHref>\r\n                            <div className=\"flex items-center\">\r\n                                <Logo />\r\n                            </div>\r\n                        </Link>\r\n                        <div style={{ marginLeft: 16, position: \"relative\" }}>\r\n                            <input\r\n                                className=\"outline-none border-none text-lg max-w-md text-ellipsis overflow-hidden whitespace-nowrap\"\r\n                                ref={headerTitle}\r\n                                value={title}\r\n                                onChange={(e) => {\r\n                                    onChangeTitle(e);\r\n                                }}\r\n                                onFocus={() => setFocus(true)}\r\n                                onBlur={() => {\r\n                                    setFocus(false);\r\n                                    if (!title) {\r\n                                        setTitle(\"제목 없는 설문지\");\r\n                                    }\r\n                                }}\r\n                                onClick={(e) => {\r\n                                    const target = e.target as HTMLInputElement;\r\n                                    target.select();\r\n                                }}\r\n                            />\r\n                            <div\r\n                                className={classNames(\"customTextareaBottomBorder\", {\r\n                                    active: focus,\r\n                                })}\r\n                                style={{\r\n                                    backgroundColor: focus ? \"black\" : undefined,\r\n                                    bottom: -5,\r\n                                }}\r\n                            ></div>\r\n                        </div>\r\n                        <Tooltip title=\"폴더로 이동\">\r\n                            <IconButton size={\"small\"}>\r\n                                <FolderOpenIcon style={{ color: \"#5f6368\" }} />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip\r\n                            title=\"별표\"\r\n                            style={{ marginLeft: 8 }}\r\n                            onClick={() => {\r\n                                setFillStar((prev) => !prev);\r\n                            }}\r\n                        >\r\n                            <IconButton size={\"small\"}>{fillStar ? <StarIcon className=\"text-main\" /> : <StarBorderIcon style={{ color: \"#5f6368\" }} />}</IconButton>\r\n                        </Tooltip>\r\n                    </div>\r\n                    <div className=\"flex items-center space-x-1\">\r\n                        <div className=\"relative -left-2\">\r\n                            <Tooltip title=\"미리보기\" onClick={preview}>\r\n                                <IconButton>\r\n                                    <VisibilityOutlinedIcon style={{ color: \"#5f6368\" }} />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </div>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            style={{\r\n                                color: \"white\",\r\n                                backgroundColor: \"rgb(71, 85, 105)\",\r\n                                borderRadius: 5,\r\n                                fontSize: 14,\r\n                            }}\r\n                            onClick={requestFormUpdate}\r\n                        >\r\n                            저장\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            style={{\r\n                                color: \"white\",\r\n                                backgroundColor: \"rgb(71, 85, 105)\",\r\n                                borderRadius: 5,\r\n                                fontSize: 14,\r\n                            }}\r\n                            onClick={toggleLogoutModal}\r\n                        >\r\n                            보내기\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style={{ width: 768, margin: \"0 auto\", position: \"relative\" }} id={\"cardContainer\"}>\r\n                <Card\r\n                    barPosition={[\"top\", \"left\"]}\r\n                    onClick={() => {\r\n                        setCardIndex(0);\r\n                        itemClickHandler(0);\r\n                    }}\r\n                    active={cardIndex === 0 ? true : false}\r\n                    cardTopBarColor={`rgb(71, 85, 105),1)`}\r\n                >\r\n                    <>\r\n                        <Input\r\n                            active={cardIndex === 0 ? true : false}\r\n                            placeholder={\"설문지 제목\"}\r\n                            value={title}\r\n                            onChange={onChangeTitle}\r\n                            onKeyDown={(e) => {\r\n                                if (e.key == \"Enter\") {\r\n                                    e.preventDefault();\r\n                                }\r\n                            }}\r\n                            onBlur={() => {\r\n                                if (!title) {\r\n                                    setTitle(\"제목 없는 설문지\");\r\n                                }\r\n                            }}\r\n                            fontSize={32}\r\n                            height={50}\r\n                        />\r\n                        <Input active={cardIndex === 0 ? true : false} placeholder={\"설문지 설명\"} value={subTitle} onChange={onChangeSubTitle} fontSize={14} height={24} constainerStyle={{ marginTop: 8 }} />\r\n                    </>\r\n                </Card>\r\n                <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                    <Droppable droppableId=\"questions\">\r\n                        {(provided: any) => (\r\n                            <ul className=\"questions\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                                {questions.map((v, i) => {\r\n                                    return (\r\n                                        <Draggable key={v.uuid} draggableId={v.uuid} index={i}>\r\n                                            {(provided: any) => (\r\n                                                <li ref={provided.innerRef} {...provided.draggableProps}>\r\n                                                    <Card\r\n                                                        barPosition={[\"left\"]}\r\n                                                        onClick={() => {\r\n                                                            setCardIndex(i + 1);\r\n                                                            itemClickHandler(i + 1);\r\n                                                        }}\r\n                                                        active={cardIndex === i + 1 ? true : false}\r\n                                                        provided={provided}\r\n                                                    >\r\n                                                        {cardIndex === i + 1 ? (\r\n                                                            <div>\r\n                                                                <div className=\"flex fdr\">\r\n                                                                    <Input\r\n                                                                        constainerStyle={{\r\n                                                                            width: \"100%\",\r\n                                                                            padding: 16,\r\n                                                                            marginRight: 60,\r\n                                                                            paddingBottom: 10,\r\n                                                                        }}\r\n                                                                        active={cardIndex === i + 1 ? true : false}\r\n                                                                        height={28}\r\n                                                                        fontSize={16}\r\n                                                                        backgroundColor={\"#f8f8f8\"}\r\n                                                                        bottomBorderColor={\"black\"}\r\n                                                                        value={v.question}\r\n                                                                        placeholder={\"질문\"}\r\n                                                                        onChange={(e) => {\r\n                                                                            const cp = [...questions];\r\n                                                                            const index = cp.findIndex((x) => x.uuid === v.uuid);\r\n                                                                            cp[index] = {\r\n                                                                                ...cp[index],\r\n                                                                                question: e.target.value,\r\n                                                                            };\r\n                                                                            setQuestions(cp);\r\n                                                                        }}\r\n                                                                        onKeyDown={(e) => {\r\n                                                                            if (e.key == \"Enter\") {\r\n                                                                                e.preventDefault();\r\n                                                                            }\r\n                                                                        }}\r\n                                                                    />\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            position: \"absolute\",\r\n                                                                            top: 25,\r\n                                                                            right: 238,\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <IconButton>\r\n                                                                            <ImageOutlinedIcon style={{ color: \"#5f6368\" }} />\r\n                                                                        </IconButton>\r\n                                                                    </div>\r\n                                                                    <div>\r\n                                                                        <Select\r\n                                                                            value={v.type}\r\n                                                                            onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n                                                                                const cp = [...questions];\r\n                                                                                cp[cardIndex - 1].type = e.target.value;\r\n                                                                                setQuestions(cp);\r\n                                                                            }}\r\n                                                                            renderValue={(value) => {\r\n                                                                                switch (value) {\r\n                                                                                    case \"short\":\r\n                                                                                        return (\r\n                                                                                            <div className={classes.MenuItemList}>\r\n                                                                                                <SubjectIcon />\r\n                                                                                                <span className={classes.MenuItemListLabel}>단문형</span>\r\n                                                                                            </div>\r\n                                                                                        );\r\n                                                                                    case \"long\":\r\n                                                                                        return (\r\n                                                                                            <div className={classes.MenuItemList}>\r\n                                                                                                <SubjectIcon />\r\n                                                                                                <span className={classes.MenuItemListLabel}>장문형</span>\r\n                                                                                            </div>\r\n                                                                                        );\r\n                                                                                    case \"radio\":\r\n                                                                                        return (\r\n                                                                                            <div className={classes.MenuItemList}>\r\n                                                                                                <RadioButtonCheckedIcon />\r\n                                                                                                <span className={classes.MenuItemListLabel}>객관식 질문</span>\r\n                                                                                            </div>\r\n                                                                                        );\r\n                                                                                    case \"check\":\r\n                                                                                        return (\r\n                                                                                            <div className={classes.MenuItemList}>\r\n                                                                                                <CheckBoxIcon /> <span className={classes.MenuItemListLabel}>체크박스</span>\r\n                                                                                            </div>\r\n                                                                                        );\r\n                                                                                    case \"drop\":\r\n                                                                                        return (\r\n                                                                                            <div className={classes.MenuItemList}>\r\n                                                                                                <ArrowDropDownCircleIcon />\r\n                                                                                                <span className={classes.MenuItemListLabel}>드롭다운</span>\r\n                                                                                            </div>\r\n                                                                                        );\r\n                                                                                }\r\n                                                                            }}\r\n                                                                            variant=\"outlined\"\r\n                                                                            className={classes.select}\r\n                                                                        >\r\n                                                                            <MenuItem value={\"short\"} className={classes.MenuItem}>\r\n                                                                                <SubjectIcon className={classes.icon} />\r\n                                                                                단문형\r\n                                                                            </MenuItem>\r\n                                                                            <MenuItem value={\"long\"} className={classes.MenuItem}>\r\n                                                                                <SubjectIcon className={classes.icon} />\r\n                                                                                장문형\r\n                                                                            </MenuItem>\r\n                                                                            <Divider\r\n                                                                                style={{\r\n                                                                                    marginTop: 10,\r\n                                                                                    marginBottom: 10,\r\n                                                                                }}\r\n                                                                            />\r\n                                                                            <MenuItem value={\"radio\"} className={classes.MenuItem}>\r\n                                                                                <RadioButtonCheckedIcon className={classes.icon} />\r\n                                                                                객관식 질문\r\n                                                                            </MenuItem>\r\n                                                                            <MenuItem value={\"check\"} className={classes.MenuItem}>\r\n                                                                                <CheckBoxIcon className={classes.icon} />\r\n                                                                                체크박스\r\n                                                                            </MenuItem>\r\n                                                                            <MenuItem value={\"drop\"} className={classes.MenuItem}>\r\n                                                                                <ArrowDropDownCircleIcon className={classes.icon} />\r\n                                                                                드롭다운\r\n                                                                            </MenuItem>\r\n                                                                        </Select>\r\n                                                                    </div>\r\n                                                                </div>\r\n\r\n                                                                {v.type != \"long\" && v.type != \"short\" ? (\r\n                                                                    <div>\r\n                                                                        {v.formOptions.map((val, idx) => {\r\n                                                                            return (\r\n                                                                                <div\r\n                                                                                    key={val.uuid}\r\n                                                                                    className=\"flex fdr aic optionsContainer\"\r\n                                                                                    style={{\r\n                                                                                        marginTop: idx === 0 ? 15 : 0,\r\n                                                                                        position: \"relative\",\r\n                                                                                        height: 48,\r\n                                                                                    }}\r\n                                                                                    onMouseOver={() => {\r\n                                                                                        setOptionUuid(val.uuid);\r\n                                                                                    }}\r\n                                                                                    onMouseLeave={() => {\r\n                                                                                        setOptionUuid(\"\");\r\n                                                                                    }}\r\n                                                                                    onClick={(event) => {\r\n                                                                                        const textarea = document.getElementsByClassName(\"cardWrapper\")[i + 1].getElementsByClassName(\"customTextarea\")[idx + 1] as HTMLTextAreaElement;\r\n                                                                                        textarea.select();\r\n                                                                                        event.stopPropagation();\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    {optionUuid === val.uuid && (\r\n                                                                                        <div\r\n                                                                                            style={{\r\n                                                                                                position: \"absolute\",\r\n                                                                                                left: -19,\r\n                                                                                                top: 9,\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            <DragIndicatorIcon\r\n                                                                                                style={{\r\n                                                                                                    color: \"#B3B3B3\",\r\n                                                                                                    fontSize: \"20px\",\r\n                                                                                                }}\r\n                                                                                            />\r\n                                                                                        </div>\r\n                                                                                    )}\r\n                                                                                    {v.type === \"radio\" ? (\r\n                                                                                        <RadioButtonUncheckedOutlinedIcon\r\n                                                                                            style={{\r\n                                                                                                color: \"#B3B3B3\",\r\n                                                                                                position: \"relative\",\r\n                                                                                                top: -2,\r\n                                                                                            }}\r\n                                                                                        />\r\n                                                                                    ) : v.type === \"check\" ? (\r\n                                                                                        <CheckBoxOutlineBlankIcon\r\n                                                                                            style={{\r\n                                                                                                color: \"#B3B3B3\",\r\n                                                                                                position: \"relative\",\r\n                                                                                                top: -2,\r\n                                                                                            }}\r\n                                                                                        />\r\n                                                                                    ) : (\r\n                                                                                        <span\r\n                                                                                            style={{\r\n                                                                                                fontSize: 14,\r\n                                                                                                position: \"relative\",\r\n                                                                                                top: -2,\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            {idx + 1}\r\n                                                                                        </span>\r\n                                                                                    )}\r\n\r\n                                                                                    <Input\r\n                                                                                        customTextareaBottomBorderColor={warningIndex === `${i}-${idx}` ? \"#E46337\" : \"\"}\r\n                                                                                        onBlur={() => {\r\n                                                                                            const cp = [...questions];\r\n                                                                                            const formOptions = cp[cardIndex - 1].formOptions;\r\n                                                                                            if (!formOptions[idx].text.replace(/\\s/gi, \"\")) {\r\n                                                                                                formOptions[idx].text = `옵션 ${idx + 1}`;\r\n                                                                                                setQuestions(cp);\r\n                                                                                            } else if (warningIndex === `${i}-${idx}`) {\r\n                                                                                                const formOptionsIndex = formOptions.findIndex((value) => {\r\n                                                                                                    return value.uuid === val.uuid;\r\n                                                                                                });\r\n                                                                                                formOptions[formOptionsIndex].text = `옵션 ${formOptions.length}`;\r\n                                                                                                setQuestions(cp);\r\n                                                                                                setWarningIndex(\"\");\r\n                                                                                            }\r\n                                                                                        }}\r\n                                                                                        constainerStyle={{\r\n                                                                                            width: \"90%\",\r\n                                                                                            marginLeft: 10,\r\n                                                                                        }}\r\n                                                                                        fontSize={14}\r\n                                                                                        height={24}\r\n                                                                                        value={val.text}\r\n                                                                                        borderBottom={optionUuid === val.uuid ? \"y\" : \"\"}\r\n                                                                                        onChange={(e) => {\r\n                                                                                            const cp = [...questions];\r\n                                                                                            const index = cp.findIndex((x) => x.uuid === v.uuid);\r\n                                                                                            const formOptions = cp[index].formOptions;\r\n                                                                                            const formOptionsIndex = formOptions.findIndex((value) => {\r\n                                                                                                return value.uuid === val.uuid;\r\n                                                                                            });\r\n\r\n                                                                                            formOptions[formOptionsIndex] = {\r\n                                                                                                ...formOptions[formOptionsIndex],\r\n                                                                                                text: e.target.value,\r\n                                                                                            };\r\n                                                                                            if (\r\n                                                                                                formOptions\r\n                                                                                                    .map((vv) => {\r\n                                                                                                        return vv.text;\r\n                                                                                                    })\r\n                                                                                                    .filter((vvv, iii) => {\r\n                                                                                                        return iii != idx;\r\n                                                                                                    })\r\n                                                                                                    .indexOf(e.target.value) === -1\r\n                                                                                            ) {\r\n                                                                                                setWarningIndex(\"\");\r\n                                                                                            } else {\r\n                                                                                                setWarningIndex(`${i}-${idx}`);\r\n                                                                                            }\r\n\r\n                                                                                            setQuestions(cp);\r\n                                                                                        }}\r\n                                                                                        onKeyDown={(e) => {\r\n                                                                                            if (e.ctrlKey && e.key === \"Enter\") {\r\n                                                                                                e.preventDefault();\r\n                                                                                            } else if (e.key == \"Enter\") {\r\n                                                                                                const cp = [...questions];\r\n                                                                                                const index = cp.findIndex((x) => x.uuid === v.uuid);\r\n                                                                                                const formOptions = cp[index].formOptions;\r\n                                                                                                const formOptionsIndex = formOptions.findIndex((xx) => xx.uuid === val.uuid);\r\n                                                                                                formOptions.splice(formOptionsIndex + 1, 0, {\r\n                                                                                                    uuid: uuid(),\r\n                                                                                                    text: `옵션 ${v.formOptions.length + 1}`,\r\n                                                                                                });\r\n                                                                                                setQuestions(cp);\r\n                                                                                                if (warningIndex === `${i}-${idx}`) {\r\n                                                                                                    const cp = [...questions];\r\n                                                                                                    const formOptions = cp[cardIndex - 1].formOptions;\r\n                                                                                                    const formOptionsIndex = formOptions.findIndex((value) => {\r\n                                                                                                        return value.uuid === val.uuid;\r\n                                                                                                    });\r\n                                                                                                    formOptions[formOptionsIndex].text = `옵션 ${formOptions.length - 1}`;\r\n                                                                                                    setQuestions(cp);\r\n                                                                                                    setWarningIndex(\"\");\r\n                                                                                                }\r\n                                                                                                e.preventDefault();\r\n                                                                                                setTimeout(() => {\r\n                                                                                                    const textarea = document.getElementsByClassName(\"cardWrapper\")[i + 1].getElementsByClassName(\"customTextarea\")[idx + 2] as HTMLTextAreaElement;\r\n                                                                                                    textarea.select();\r\n                                                                                                }, 1);\r\n                                                                                            } else if (e.key == \"Backspace\" && !val.text && v.formOptions.length != 1) {\r\n                                                                                                const cp = [...questions];\r\n                                                                                                const formOptions = cp[cardIndex - 1].formOptions;\r\n                                                                                                const formOptionsIndex = formOptions.findIndex((value) => {\r\n                                                                                                    return value.uuid === val.uuid;\r\n                                                                                                });\r\n                                                                                                formOptions.splice(formOptionsIndex, 1);\r\n                                                                                                setQuestions(cp);\r\n                                                                                                e.preventDefault();\r\n                                                                                                if (idx === 0) {\r\n                                                                                                    setTimeout(() => {\r\n                                                                                                        const textarea = document.getElementsByClassName(\"cardWrapper\")[i + 1].getElementsByClassName(\"customTextarea\")[1] as HTMLTextAreaElement;\r\n                                                                                                        textarea.select();\r\n                                                                                                    }, 1);\r\n                                                                                                } else {\r\n                                                                                                    setTimeout(() => {\r\n                                                                                                        const textarea = document.getElementsByClassName(\"cardWrapper\")[i + 1].getElementsByClassName(\"customTextarea\")[idx] as HTMLTextAreaElement;\r\n                                                                                                        textarea.select();\r\n                                                                                                    }, 1);\r\n                                                                                                }\r\n                                                                                            }\r\n                                                                                        }}\r\n                                                                                    />\r\n                                                                                    {warningIndex === `${i}-${idx}` && (\r\n                                                                                        <Tooltip\r\n                                                                                            title=\"중복옵션은 지원되지 않습니다.\"\r\n                                                                                            onClick={(event) => {\r\n                                                                                                const cp = [...questions];\r\n                                                                                                const formOptions = cp[cardIndex - 1].formOptions;\r\n                                                                                                const formOptionsIndex = formOptions.findIndex((value) => {\r\n                                                                                                    return value.uuid === val.uuid;\r\n                                                                                                });\r\n                                                                                                formOptions[formOptionsIndex].text = `옵션 ${formOptions.length}`;\r\n                                                                                                setQuestions(cp);\r\n                                                                                                setWarningIndex(\"\");\r\n                                                                                                const textarea = document.getElementsByClassName(\"cardWrapper\")[i + 1].getElementsByClassName(\"customTextarea\")[idx + 1] as HTMLTextAreaElement;\r\n                                                                                                textarea.blur();\r\n                                                                                                event.stopPropagation();\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            <IconButton>\r\n                                                                                                <WarningIcon\r\n                                                                                                    style={{\r\n                                                                                                        color: \"#E46337\",\r\n                                                                                                    }}\r\n                                                                                                />\r\n                                                                                            </IconButton>\r\n                                                                                        </Tooltip>\r\n                                                                                    )}\r\n                                                                                    {v.formOptions.length > 1 && (\r\n                                                                                        <Tooltip\r\n                                                                                            title=\"삭제\"\r\n                                                                                            onClick={() => {\r\n                                                                                                const cp = [...questions];\r\n                                                                                                const formOptions = cp[cardIndex - 1].formOptions;\r\n                                                                                                const formOptionsIndex = formOptions.findIndex((value) => {\r\n                                                                                                    return value.uuid === val.uuid;\r\n                                                                                                });\r\n                                                                                                formOptions.splice(formOptionsIndex, 1);\r\n                                                                                                setQuestions(cp);\r\n                                                                                            }}\r\n                                                                                        >\r\n                                                                                            <IconButton>\r\n                                                                                                <ClearIcon\r\n                                                                                                    style={{\r\n                                                                                                        color: \"#5f6368\",\r\n                                                                                                    }}\r\n                                                                                                />\r\n                                                                                            </IconButton>\r\n                                                                                        </Tooltip>\r\n                                                                                    )}\r\n                                                                                </div>\r\n                                                                            );\r\n                                                                        })}\r\n                                                                        <div\r\n                                                                            className=\"flex fdr aic\"\r\n                                                                            style={{\r\n                                                                                height: 44,\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            {v.type === \"radio\" ? (\r\n                                                                                <RadioButtonUncheckedOutlinedIcon\r\n                                                                                    style={{\r\n                                                                                        color: \"#B3B3B3\",\r\n                                                                                    }}\r\n                                                                                />\r\n                                                                            ) : v.type === \"check\" ? (\r\n                                                                                <CheckBoxOutlineBlankIcon\r\n                                                                                    style={{\r\n                                                                                        color: \"#B3B3B3\",\r\n                                                                                    }}\r\n                                                                                />\r\n                                                                            ) : (\r\n                                                                                <span\r\n                                                                                    style={{\r\n                                                                                        fontSize: 14,\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    {v.formOptions.length + 1}\r\n                                                                                </span>\r\n                                                                            )}\r\n\r\n                                                                            {v.type === \"drop\" ? (\r\n                                                                                <div\r\n                                                                                    style={{\r\n                                                                                        fontSize: 14,\r\n                                                                                        marginLeft: 12,\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    <span\r\n                                                                                        className=\"addOption\"\r\n                                                                                        style={{\r\n                                                                                            display: \"inline-flex\",\r\n                                                                                            color: \"#7f7f7f\",\r\n                                                                                            height: 35,\r\n                                                                                            alignItems: \"center\",\r\n                                                                                        }}\r\n                                                                                        onClick={() => {\r\n                                                                                            const cp = [...questions];\r\n                                                                                            const index = cp.findIndex((x) => x.uuid === v.uuid);\r\n                                                                                            const formOptions = cp[index].formOptions;\r\n                                                                                            formOptions.push({\r\n                                                                                                uuid: uuid(),\r\n                                                                                                text: `옵션 ${v.formOptions.length + 1}`,\r\n                                                                                            });\r\n                                                                                            setQuestions(cp);\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        옵션 추가\r\n                                                                                    </span>\r\n                                                                                </div>\r\n                                                                            ) : (\r\n                                                                                <div\r\n                                                                                    style={{\r\n                                                                                        fontSize: 14,\r\n                                                                                        marginLeft: 12,\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    <span\r\n                                                                                        className=\"addOption\"\r\n                                                                                        style={{\r\n                                                                                            display: \"inline-flex\",\r\n                                                                                            color: \"#7f7f7f\",\r\n                                                                                            height: 35,\r\n                                                                                            alignItems: \"center\",\r\n                                                                                        }}\r\n                                                                                        onClick={() => {\r\n                                                                                            const cp = [...questions];\r\n                                                                                            const index = cp.findIndex((x) => x.uuid === v.uuid);\r\n                                                                                            const formOptions = cp[index].formOptions;\r\n                                                                                            formOptions.push({\r\n                                                                                                uuid: uuid(),\r\n                                                                                                text: `옵션 ${v.formOptions.length + 1}`,\r\n                                                                                            });\r\n                                                                                            setQuestions(cp);\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        옵션 추가\r\n                                                                                    </span>{\" \"}\r\n                                                                                    또는{\" \"}\r\n                                                                                    <span\r\n                                                                                        className=\"addOther\"\r\n                                                                                        style={{\r\n                                                                                            display: \"inline-flex\",\r\n                                                                                            color: \"#4285F4\",\r\n                                                                                            alignItems: \"center\",\r\n                                                                                            padding: \"0 5px\",\r\n                                                                                            marginLeft: -3,\r\n                                                                                            borderRadius: 4,\r\n                                                                                            height: 35,\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        {`'기타' 추가`}\r\n                                                                                    </span>\r\n                                                                                </div>\r\n                                                                            )}\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                ) : (\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            marginTop: 20,\r\n                                                                            marginBottom: 15,\r\n                                                                            fontSize: 14,\r\n                                                                            color: \"gray\",\r\n                                                                            borderBottom: \"1px dotted black\",\r\n                                                                            paddingBottom: 5,\r\n                                                                            width: 350,\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {v.type === \"long\" ? \"장문형 텍스트\" : \"단답형 텍스트\"}\r\n                                                                    </div>\r\n                                                                )}\r\n                                                                <div\r\n                                                                    style={{\r\n                                                                        position: \"relative\",\r\n                                                                        top: 26,\r\n                                                                        width: 720,\r\n                                                                        height: 65,\r\n                                                                        borderTop: \"1px solid #d9d9d9\",\r\n                                                                        display: \"flex\",\r\n                                                                        flexDirection: \"row\",\r\n                                                                        alignItems: \"center\",\r\n                                                                        justifyContent: \"flex-end\",\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <Tooltip\r\n                                                                        title=\"복사\"\r\n                                                                        onClick={() => {\r\n                                                                            const cp = [...questions];\r\n                                                                            cp.splice(cardIndex, 0, {\r\n                                                                                ...cp[cardIndex - 1],\r\n                                                                                uuid: uuid(),\r\n                                                                                formOptions: cp[cardIndex - 1].formOptions.map((x) => {\r\n                                                                                    return {\r\n                                                                                        text: x.text,\r\n                                                                                        uuid: uuid(),\r\n                                                                                    };\r\n                                                                                }),\r\n                                                                            });\r\n                                                                            setQuestions(cp);\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <IconButton>\r\n                                                                            <FileCopyOutlinedIcon style={{ color: \"#5f6368\" }} />\r\n                                                                        </IconButton>\r\n                                                                    </Tooltip>\r\n                                                                    <Tooltip\r\n                                                                        title=\"삭제\"\r\n                                                                        onClick={() => {\r\n                                                                            const cp = [...questions];\r\n                                                                            const index = cp.findIndex((x) => {\r\n                                                                                return x.uuid == v.uuid;\r\n                                                                            });\r\n                                                                            cp.splice(index, 1);\r\n                                                                            setQuestions(cp);\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <IconButton>\r\n                                                                            <DeleteOutlineIcon style={{ color: \"#5f6368\" }} />\r\n                                                                        </IconButton>\r\n                                                                    </Tooltip>\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            height: 30,\r\n                                                                            borderLeft: \"1px solid #d9d9d9\",\r\n                                                                            marginLeft: 15,\r\n                                                                            marginRight: 20,\r\n                                                                        }}\r\n                                                                    ></div>\r\n                                                                    <div className=\"flex fdr jcfe\">\r\n                                                                        <div className=\"flex fdr aic\">\r\n                                                                            <span\r\n                                                                                style={{\r\n                                                                                    marginRight: 16,\r\n                                                                                    fontSize: 14,\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                필수\r\n                                                                            </span>\r\n                                                                            <Toggle\r\n                                                                                active={questions[i].isNeccessary}\r\n                                                                                setToggle={() => {\r\n                                                                                    const cp = [...questions];\r\n                                                                                    cp[cardIndex - 1].isNeccessary = !cp[cardIndex - 1].isNeccessary;\r\n                                                                                    setQuestions(cp);\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                    <IconButton style={{ marginLeft: 5 }}>\r\n                                                                        <MoreVertIcon style={{ color: \"#5f6368\" }} />\r\n                                                                    </IconButton>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        ) : (\r\n                                                            <div>\r\n                                                                <div>\r\n                                                                    {v.question ? v.question : \"질문\"}{\" \"}\r\n                                                                    {v.isNeccessary && (\r\n                                                                        <span\r\n                                                                            style={{\r\n                                                                                fontSize: 13,\r\n                                                                                color: \"rgba(219, 68, 55, 1)\",\r\n                                                                                position: \"relative\",\r\n                                                                                top: -3,\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            *\r\n                                                                        </span>\r\n                                                                    )}\r\n                                                                </div>\r\n                                                                {v.type != \"long\" && v.type != \"short\" ? (\r\n                                                                    v.formOptions.map((val, idx) => {\r\n                                                                        return (\r\n                                                                            <div\r\n                                                                                key={val.uuid}\r\n                                                                                className=\"flex fdr aic optionsContainer\"\r\n                                                                                style={{\r\n                                                                                    marginTop: idx === 0 ? 15 : 0,\r\n                                                                                    position: \"relative\",\r\n                                                                                    height: 48,\r\n                                                                                }}\r\n                                                                                onClick={(event) => {\r\n                                                                                    setTimeout(() => {\r\n                                                                                        const textarea = document.getElementsByClassName(\"cardWrapper\")[i + 1].getElementsByClassName(\"customTextarea\")[idx + 1] as HTMLTextAreaElement;\r\n                                                                                        textarea.select();\r\n                                                                                        event.stopPropagation();\r\n                                                                                    }, 1);\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                {v.type === \"radio\" ? (\r\n                                                                                    <RadioButtonUncheckedOutlinedIcon\r\n                                                                                        style={{\r\n                                                                                            color: \"#B3B3B3\",\r\n                                                                                            position: \"relative\",\r\n                                                                                            top: 1,\r\n                                                                                        }}\r\n                                                                                    />\r\n                                                                                ) : v.type === \"check\" ? (\r\n                                                                                    <CheckBoxOutlineBlankIcon\r\n                                                                                        style={{\r\n                                                                                            color: \"#B3B3B3\",\r\n                                                                                            position: \"relative\",\r\n                                                                                            top: 1,\r\n                                                                                        }}\r\n                                                                                    />\r\n                                                                                ) : (\r\n                                                                                    <span\r\n                                                                                        style={{\r\n                                                                                            fontSize: 14,\r\n                                                                                            position: \"relative\",\r\n                                                                                            top: 1,\r\n                                                                                        }}\r\n                                                                                    >\r\n                                                                                        {idx + 1}\r\n                                                                                    </span>\r\n                                                                                )}\r\n                                                                                <span\r\n                                                                                    style={{\r\n                                                                                        fontSize: 14,\r\n                                                                                        marginLeft: 10,\r\n                                                                                    }}\r\n                                                                                >\r\n                                                                                    {val.text}\r\n                                                                                </span>\r\n                                                                            </div>\r\n                                                                        );\r\n                                                                    })\r\n                                                                ) : (\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            marginTop: 20,\r\n                                                                            marginBottom: 15,\r\n                                                                            fontSize: 14,\r\n                                                                            color: \"gray\",\r\n                                                                            borderBottom: \"1px dotted black\",\r\n                                                                            paddingBottom: 5,\r\n                                                                            width: 350,\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {v.type === \"long\" ? \"장문형 텍스트\" : \"단답형 텍스트\"}\r\n                                                                    </div>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        )}\r\n                                                    </Card>\r\n                                                </li>\r\n                                            )}\r\n                                        </Draggable>\r\n                                    );\r\n                                })}\r\n                                {provided.placeholder}\r\n                            </ul>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n                <div ref={footer} style={{ height: 1 }}></div>\r\n                <div\r\n                    ref={rightDiv}\r\n                    style={{\r\n                        width: 50,\r\n                        height: 50,\r\n                        borderRadius: 10,\r\n                        position: \"absolute\",\r\n                        top: 0,\r\n                        right: -60,\r\n                        backgroundColor: \"white\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\",\r\n                        display: \"flex\",\r\n                        fontSize: 25,\r\n                        border: \"1px solid #dadce0\",\r\n                        boxShadow: \"0px 1px 1px rgb(148, 146, 146)\",\r\n                        transition: \"top 0.25s ease-in-out\",\r\n                    }}\r\n                >\r\n                    <Tooltip\r\n                        title=\"질문 추가\"\r\n                        onClick={() => {\r\n                            const cp = [...questions];\r\n                            cp.splice(cardIndex, 0, {\r\n                                type: \"radio\",\r\n                                question: \"\",\r\n                                uuid: uuid(),\r\n                                formOptions: [\r\n                                    {\r\n                                        text: \"옵션 1\",\r\n                                        uuid: uuid(),\r\n                                    },\r\n                                ],\r\n                                isNeccessary: false,\r\n                                section: 1,\r\n                                order: 1,\r\n                            });\r\n                            setQuestions(cp);\r\n                        }}\r\n                    >\r\n                        <IconButton size={\"small\"}>\r\n                            <AddCircleOutlineIcon style={{ color: \"#5f6368\" }} />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </div>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    fontSize: 20,\r\n                    color: \"gray\",\r\n                    textAlign: \"center\",\r\n                    marginTop: 5,\r\n                }}\r\n            >\r\n                색상변경 및 미리보기가 가능합니다.\r\n                <br />\r\n                옵션을 섞고싶은 카드를 선택한 뒤 Ctrl + Enter를 입력하시면 옵션을 무작위로 섞을 수 있습니다.\r\n            </div>\r\n            <Alert title={\"폼 변경\"} subTitle={\"변경사항이 수정되었습니다.\"} />\r\n            <div className={`w-full absolute top-0 left-0 bg-black bg-opacity-20 flex justify-center items-center ${isVisibleModal ? \"z-10 opacity-100 h-full\" : \"-z-10 opacity-0 h-0\"}`} onClick={toggleLogoutModal}>\r\n                <div\r\n                    className={`w-120 h-64 rounded-md bg-white relative p-6 border-1 shadow-md transition-all ${isVisibleModal ? \"opacity-100 top-0\" : \"opacity-0 top-10\"}`}\r\n                    onClick={(e) => {\r\n                        e.stopPropagation();\r\n                    }}\r\n                >\r\n                    <div className=\"text-lg font-bold\">설문지 보내기</div>\r\n                    <div className=\"text-md mt-6\">링크</div>\r\n                    <div className=\"mt-2\">\r\n                        <Input\r\n                            // active={cardIndex === i + 1 ? true : false}\r\n                            height={28}\r\n                            fontSize={16}\r\n                            backgroundColor={\"#f8f8f8\"}\r\n                            bottomBorderColor={\"black\"}\r\n                            value={`http://localhost:3000/forms/${router.query.form}/viewform`}\r\n                        />\r\n                    </div>\r\n                    <div className=\"mt-8 text-right space-x-2 absolute bottom-6 right-6\">\r\n                        <button className={`w-20 h-8 rounded-md border-1 border-main text-main text-sm`} onClick={toggleLogoutModal}>\r\n                            취소\r\n                        </button>\r\n                        <button\r\n                            className={`w-20 h-8 rounded-md bg-main text-white text-sm`}\r\n                            onClick={() => {\r\n                                handleCopyClipBoard(`http://localhost:3000/forms/${router.query.form}/viewform`);\r\n                            }}\r\n                        >\r\n                            저장\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className={`rounded-sm bg-slate-800 text-white absolute left-20 p-2 text-sm transition-all ${isCopyed ? \"bottom-10\" : \"-bottom-10\"}`}>클립보드에 복사되었습니다.</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreateForm;\r\n","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\forms\\[form]\\viewform.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\index.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\mypage\\account\\changePassword.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\mypage\\account\\deleteAccount.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\mypage\\account\\profile.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\mypage\\myForm.tsx",["101"],"import React, { useEffect, useState } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport MypageHeader from \"../../components/layout/MypageHeader\";\r\nimport { useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Modal from \"../../components/Modal\";\r\nimport { setAlert, setModal } from \"../../reducers/store/user\";\r\nimport Alert from \"../../components/Alert\";\r\nimport App from \"../../components/App\";\r\n\r\ninterface IForms {\r\n    id: string;\r\n    title: string;\r\n    updatedAt: string;\r\n}\r\n\r\ninterface IData {\r\n    UserEmail: string;\r\n    formContents: [];\r\n    id: string;\r\n    subTitle: string;\r\n    title: string;\r\n    userEmail: string;\r\n    createdAt: string;\r\n    updatedAt: string;\r\n}\r\n\r\nconst MyForm = () => {\r\n    const router = useRouter();\r\n    const dispatch = useDispatch();\r\n    // 접속한 유저의 이메일\r\n    const email = useSelector(({ user }: any) => user.userInfo.email);\r\n    // 설문지 목록\r\n    const [forms, setForms] = useState<IForms[]>([]);\r\n\r\n    // 설문지 목록요청\r\n    const requestForms = (): void => {\r\n        axios\r\n            .post(`http://elb-test-852958890.ap-northeast-2.elb.amazonaws.com/form/list/${email}`, { email: email })\r\n            .then((res) => {\r\n                setForms(\r\n                    res.data.data.map((obj: IData): IForms => {\r\n                        delete obj.UserEmail;\r\n                        delete obj.userEmail;\r\n                        delete obj.formContents;\r\n                        delete obj.subTitle;\r\n                        delete obj.createdAt;\r\n                        // const updatedAt: string = obj.updatedAt.split(\"T\")[0];\r\n                        // return {\r\n                        //     ...obj,\r\n                        //     updatedAt: updatedAt,\r\n                        // };\r\n                        return obj;\r\n                    })\r\n                );\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n                setForms([]);\r\n            });\r\n    };\r\n\r\n    // 페이지 입장 시 설문지 목록 불러옴\r\n    useEffect(() => {\r\n        requestForms();\r\n    }, []);\r\n    // 설문지 클릭시 설문지 페이지로 이동\r\n    const showForm = (id: string): void => {\r\n        router.push(`/forms/${id}`);\r\n    };\r\n\r\n    // 유저아이콘 클릭 시 모달의 보임 유무 state 관리\r\n    const [selectedId, setSelectedId] = useState<string>(\"\");\r\n    const [beDeletedId, setBeDeletedId] = useState<string>(\"\");\r\n\r\n    // 정말 삭제 할지 모달 띄우기\r\n    const openModal = (): void => {\r\n        setBeDeletedId(selectedId);\r\n        setSelectedId(\"\");\r\n        dispatch(setModal(true));\r\n    };\r\n\r\n    // 설문지 삭제요청\r\n    const requestDeleteForm = (): void => {\r\n        axios\r\n            .delete(`http://elb-test-852958890.ap-northeast-2.elb.amazonaws.com/form/delete/${beDeletedId}`)\r\n            .then((res) => {\r\n                requestForms();\r\n                dispatch(setAlert(true));\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <App />\r\n            <MypageHeader setSelectedId={setSelectedId} />\r\n            <div\r\n                className=\"flex justify-center py-5 min-h-myforms\"\r\n                onClick={() => {\r\n                    setSelectedId(\"\");\r\n                }}\r\n            >\r\n                {forms.length !== 0 ? (\r\n                    <div className=\"w-222 inline-block\">\r\n                        <div className={`flex items-center w-full text-slate-600 border-slate-300 py-2`}>\r\n                            <div className=\"w-10 flex justify-center items-center\" />\r\n                            <div className=\"w-8/12 pr-4 text-ellipsis overflow-hidden whitespace-nowrap\">제목</div>\r\n                            <div className=\"w-3/12\">최근 수정날짜</div>\r\n                        </div>\r\n                        {forms.map(({ id, title, updatedAt }, idx) => {\r\n                            return (\r\n                                <div\r\n                                    className={`flex items-center w-full text-slate-600 border-t-1 border-slate-300 py-2 hover:border-white hover:bg-yellow-100 hover:rounded-full ${idx === 0 && \"border-none\"}`}\r\n                                    key={id}\r\n                                    onClick={() => {\r\n                                        showForm(id);\r\n                                    }}\r\n                                >\r\n                                    <div className=\"w-10 flex justify-center items-center\">\r\n                                        <DescriptionIcon />\r\n                                    </div>\r\n                                    <div className=\"w-8/12 pr-4 text-ellipsis overflow-hidden whitespace-nowrap\">{title}</div>\r\n                                    <div className=\"w-3/12\">{updatedAt}</div>\r\n                                    <div\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            setSelectedId(id);\r\n                                        }}\r\n                                        className=\"relative\"\r\n                                    >\r\n                                        <IconButton size={\"small\"}>\r\n                                            <MoreVertIcon />\r\n                                        </IconButton>\r\n                                        {selectedId === id && (\r\n                                            <div className=\" bg-white absolute z-10 -left-12 top-9 w-32 py-2 border-1 rounded-md text-xs text-slate-500 shadow-md\">\r\n                                                <p\r\n                                                    className=\"hover:bg-gray-100 cursor-pointer px-2 py-2 font\"\r\n                                                    onClick={() => {\r\n                                                        showForm(id);\r\n                                                    }}\r\n                                                >\r\n                                                    설문지 보기\r\n                                                </p>\r\n                                                <div className=\"flex justify-center mt-2 mb-1\">\r\n                                                    <div className=\" inline-flex w-28 h-1 border-t-1\" />\r\n                                                </div>\r\n                                                <p\r\n                                                    className=\"hover:bg-gray-100 cursor-pointer px-2 py-2 text-red-400\"\r\n                                                    onClick={(e) => {\r\n                                                        e.stopPropagation();\r\n                                                        openModal();\r\n                                                    }}\r\n                                                >\r\n                                                    설문지 삭제\r\n                                                </p>\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"w-222 inline-block\">폼이 없습니다. 메인화면에서 폼을 만들어주세요.</div>\r\n                )}\r\n            </div>\r\n            <Modal title={\"폼 삭제\"} subTitle={\"정말로 폼을 삭제 하시겠습니까?\"} onClick={requestDeleteForm} />\r\n            <Alert title={\"폼 삭제\"} subTitle={\"폼이 삭제 되었습니다.\"} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MyForm;\r\n","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\pages\\_app.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\Alert.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\App.tsx",["102"],"import React, { useEffect } from \"react\";\r\nimport Head from \"next/head\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setUserInfo, setAccessToken, logout, setAlert } from \"../reducers/store/user\";\r\nimport { useRouter } from \"next/router\";\r\nimport axios from \"axios\";\r\n\r\nconst App = () => {\r\n    const dispatch = useDispatch();\r\n    const router = useRouter();\r\n    // 리덕스_typescript는 후에 적용하겠습니다.\r\n    const accessToken = useSelector(({ user }: any) => user.userToken.accessToken);\r\n\r\n    // 모든 페이지에서 redux에 저장된 accessToken을 조회한다.\r\n    useEffect((): void => {\r\n        if (accessToken) {\r\n            axios\r\n                .post(\"http://elb-test-852958890.ap-northeast-2.elb.amazonaws.com/user/getUserInfo\", null, {\r\n                    headers: {\r\n                        Authorization: accessToken,\r\n                    },\r\n                    withCredentials: true,\r\n                })\r\n                .then((res) => {\r\n                    dispatch(setUserInfo(res.data.data.userInfo));\r\n                })\r\n                .catch((err) => {\r\n                    // refresh token도 만료가 됐을경우 로그아웃을 시킨다.\r\n                    if (err.response.data.message === \"invalid refresh token, please log in again\") {\r\n                        dispatch(logout());\r\n                        router.push({\r\n                            pathname: \"/auth/login\",\r\n                            query: {\r\n                                invaildRefreshToken: true,\r\n                            },\r\n                        });\r\n                        setTimeout(() => {\r\n                            dispatch(setAlert(true));\r\n                        }, 50);\r\n                    }\r\n                });\r\n        }\r\n    }, []);\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>Form Bakery</title>\r\n                <meta name=\"keyword\" content=\"Form Bakery, free Form\" />\r\n                <meta name=\"description\" content=\"first codestate team project\" />\r\n                <meta name=\"author\" content=\"codeBaker\" />\r\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n                <link rel=\"icon\" href=\"/logo.ico\" />\r\n            </Head>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\Card.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\Input.tsx",["103"],"import React, { CSSProperties, useEffect, useRef, useState, ChangeEvent, KeyboardEvent } from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface IProps {\r\n    active?: boolean;\r\n    fontSize?: number;\r\n    placeholder?: string;\r\n    value?: string;\r\n    onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\r\n    height?: number;\r\n    customTextareaBottomBorderColor?: string;\r\n    onKeyDown?: (e: KeyboardEvent<HTMLTextAreaElement>) => void;\r\n    onBlur?: () => void;\r\n    constainerStyle?: CSSProperties;\r\n    backgroundColor?: string;\r\n    bottomBorderColor?: string;\r\n    borderBottom?: string;\r\n}\r\n\r\nconst Input = ({ active, fontSize, placeholder, value, onChange, height, customTextareaBottomBorderColor, onKeyDown, onBlur, constainerStyle, backgroundColor, bottomBorderColor, borderBottom }: IProps) => {\r\n    const [focus, setFocus] = useState(false);\r\n    const textAreaRef = useRef<HTMLTextAreaElement>(null);\r\n    const resizeHeight = () => {\r\n        if (textAreaRef === null || textAreaRef.current === null) {\r\n            return;\r\n        }\r\n        textAreaRef.current.style.height = height + \"px\";\r\n        textAreaRef.current.style.height = textAreaRef.current.scrollHeight + \"px\";\r\n    };\r\n\r\n    useEffect(() => {\r\n        resizeHeight();\r\n    }, [value]);\r\n\r\n    const [hover, setHover] = useState(false);\r\n\r\n    return (\r\n        <div\r\n            className=\"customTextareaWrapper\"\r\n            style={{\r\n                ...constainerStyle,\r\n                backgroundColor: active && hover && backgroundColor ? \"#f1f3f4\" : active && backgroundColor ? backgroundColor : undefined,\r\n            }}\r\n            onMouseOver={() => {\r\n                setHover(true);\r\n            }}\r\n            onMouseLeave={() => {\r\n                setHover(false);\r\n            }}\r\n        >\r\n            <textarea\r\n                ref={textAreaRef}\r\n                className={classNames(\"customTextarea pt-1\", { active: active })}\r\n                onFocus={(e) => {\r\n                    setFocus(true);\r\n                }}\r\n                onBlur={\r\n                    onBlur\r\n                        ? () => {\r\n                              onBlur();\r\n                              setFocus(false);\r\n                          }\r\n                        : () => {\r\n                              setFocus(false);\r\n                          }\r\n                }\r\n                style={{\r\n                    fontSize: fontSize,\r\n                    height: height,\r\n                    backgroundColor: active && hover && backgroundColor ? \"#f1f3f4\" : active && backgroundColor ? backgroundColor : undefined,\r\n                }}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={(e) => {\r\n                    onChange(e);\r\n                }}\r\n                onKeyDown={onKeyDown}\r\n                onClick={(e) => {\r\n                    const target = e.target as HTMLTextAreaElement\r\n                    target.select();\r\n                }}\r\n            />\r\n\r\n            <div\r\n                className=\"customTextareaDefaultBottomBorder\"\r\n                style={{\r\n                    display: active ? undefined : borderBottom ? undefined : \"none\",\r\n                    backgroundColor: bottomBorderColor ? bottomBorderColor : undefined,\r\n                }}\r\n            ></div>\r\n            <div\r\n                className={classNames(\"customTextareaBottomBorder\", {\r\n                    active: focus,\r\n                })}\r\n                style={{\r\n                    backgroundColor: focus && customTextareaBottomBorderColor ? customTextareaBottomBorderColor : undefined,\r\n                }}\r\n            ></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\layout\\AccountLeftPannel.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\layout\\AuthContainer.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\layout\\Header.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\layout\\MypageHeader.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\Logo.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\Modal.tsx",[],"C:\\vsCode_sketchBook\\codestate\\FormBakery\\client\\components\\Toggle.tsx",[],{"ruleId":"104","severity":1,"message":"105","line":117,"column":8,"nodeType":"106","endLine":117,"endColumn":18,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"105","line":132,"column":8,"nodeType":"106","endLine":132,"endColumn":23,"suggestions":"108"},{"ruleId":"104","severity":1,"message":"105","line":80,"column":8,"nodeType":"106","endLine":80,"endColumn":15,"suggestions":"109"},{"ruleId":"104","severity":1,"message":"105","line":95,"column":8,"nodeType":"106","endLine":95,"endColumn":24,"suggestions":"110"},{"ruleId":"104","severity":1,"message":"111","line":234,"column":8,"nodeType":"106","endLine":234,"endColumn":19,"suggestions":"112"},{"ruleId":"104","severity":1,"message":"113","line":262,"column":8,"nodeType":"106","endLine":262,"endColumn":19,"suggestions":"114"},{"ruleId":"104","severity":1,"message":"115","line":70,"column":8,"nodeType":"106","endLine":70,"endColumn":10,"suggestions":"116"},{"ruleId":"104","severity":1,"message":"117","line":43,"column":8,"nodeType":"106","endLine":43,"endColumn":10,"suggestions":"118"},{"ruleId":"104","severity":1,"message":"119","line":33,"column":8,"nodeType":"106","endLine":33,"endColumn":15,"suggestions":"120"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isDisable'. Either include it or remove the dependency array. You can also do a functional update 'setIsDisable(i => ...)' if you only need 'isDisable' in the 'setIsDisable' call.","ArrayExpression",["121"],["122"],["123"],["124"],"React Hook useEffect has missing dependencies: 'cardIndex' and 'questionsLength'. Either include them or remove the dependency array. You can also do a functional update 'setCardIndex(c => ...)' if you only need 'cardIndex' in the 'setCardIndex' call.",["125"],"React Hook useEffect has missing dependencies: 'itemClickHandler' and 'prevCardIndex'. Either include them or remove the dependency array.",["126"],"React Hook useEffect has a missing dependency: 'requestForms'. Either include it or remove the dependency array.",["127"],"React Hook useEffect has missing dependencies: 'accessToken', 'dispatch', and 'router'. Either include them or remove the dependency array.",["128"],"React Hook useEffect has a missing dependency: 'resizeHeight'. Either include it or remove the dependency array.",["129"],{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},"Update the dependencies array to be: [isDisable, userInfo]",{"range":"148","text":"149"},"Update the dependencies array to be: [isDisable, userInfo.auth]",{"range":"150","text":"151"},"Update the dependencies array to be: [email, isDisable]",{"range":"152","text":"153"},"Update the dependencies array to be: [auth, isDisable, password]",{"range":"154","text":"155"},"Update the dependencies array to be: [cardIndex, questions, questionsLength]",{"range":"156","text":"157"},"Update the dependencies array to be: [cardIndex, itemClickHandler, prevCardIndex]",{"range":"158","text":"159"},"Update the dependencies array to be: [requestForms]",{"range":"160","text":"161"},"Update the dependencies array to be: [accessToken, dispatch, router]",{"range":"162","text":"163"},"Update the dependencies array to be: [resizeHeight, value]",{"range":"164","text":"165"},[3542,3552],"[isDisable, userInfo]",[3912,3927],"[isDisable, userInfo.auth]",[2373,2380],"[email, isDisable]",[2781,2797],"[auth, isDisable, password]",[8673,8684],"[cardIndex, questions, questionsLength]",[9773,9784],"[cardIndex, itemClickHandler, prevCardIndex]",[2289,2291],"[requestForms]",[1722,1724],"[accessToken, dispatch, router]",[1278,1285],"[resizeHeight, value]"]